pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    environment {
        EC2_USER = 'ubuntu'  
        SSH_KEY = credentials('ssh-key-ec2')
        DEV_IP = '35.173.210.139'
        QA_IP  = '34.199.159.255'
        PROD_IP = '18.235.91.203'
        REMOTE_PATH = '/home/ubuntu/auth_service'
        PROJECT_REPO = 'https://github.com/Gallegos19/auth_service.git'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout Project Code') {
            steps {
                script {
                    env.TARGET_BRANCH = params.BRANCH ?: env.BRANCH_NAME ?: 'main'
                    
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${env.TARGET_BRANCH}"]],
                        extensions: [],
                        userRemoteConfigs: [[
                            url: env.PROJECT_REPO,
                            credentialsId: 'ssh-key-ec2'
                        ]]
                    ])
                    
                    env.ACTUAL_BRANCH = env.TARGET_BRANCH
                    echo "üîç Rama objetivo: ${env.ACTUAL_BRANCH}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def ip = env.ACTUAL_BRANCH == 'dev' ? DEV_IP :
                             env.ACTUAL_BRANCH == 'qa'  ? QA_IP :
                             env.ACTUAL_BRANCH == 'main' ? PROD_IP : null

                    def pm2_name = "${env.ACTUAL_BRANCH}-health"
                    def env_file = ".env.${env.ACTUAL_BRANCH}"

                    if (ip == null) {
                        error "Branch ${env.ACTUAL_BRANCH} no est√° configurada para despliegue."
                    }

                    sh """
                    ssh -i $SSH_KEY -o StrictHostKeyChecking=no $EC2_USER@$ip '
                        echo "üì¶ Actualizando sistema..."
                        sudo apt-get update -y
                        
                        echo "üì• Verificando Node.js..."
                        if ! command -v node > /dev/null; then
                            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                            sudo apt-get install -y nodejs
                        fi

                        echo "üì• Verificando PM2 y dependencias..."
                        if ! command -v pm2 > /dev/null; then
                            sudo npm install -g pm2
                        fi
                        
                        if ! npm list -g ts-node > /dev/null 2>&1; then
                            sudo npm install -g ts-node typescript
                        fi

                        echo "üìÅ Configurando repositorio..."
                        if [ ! -d "$REMOTE_PATH/.git" ]; then
                            git clone -b ${env.ACTUAL_BRANCH} ${PROJECT_REPO} $REMOTE_PATH
                        fi

                        echo "üîÅ Actualizando c√≥digo..."
                        cd $REMOTE_PATH
                        git fetch origin
                        git reset --hard origin/${env.ACTUAL_BRANCH}
                        git clean -fd
                        
                        echo "üîß Configurando variables de entorno..."
                        # Usar el archivo .env espec√≠fico por rama si existe, sino usar .env.example
                        if [ -f "$REMOTE_PATH/${env_file}" ]; then
                            cp $REMOTE_PATH/${env_file} $REMOTE_PATH/.env
                        else
                            cp $REMOTE_PATH/.env.example $REMOTE_PATH/.env
                            echo "‚ö†Ô∏è Usando .env.example porque no se encontr√≥ ${env_file}"
                        fi
                        
                        # Asegurar permisos correctos
                        sudo chown ubuntu:ubuntu $REMOTE_PATH/.env
                        sudo chmod 644 $REMOTE_PATH/.env
                        
                        echo "üöÄ Instalando dependencias..."
                        npm ci
                        
                        echo "üì¶ Instalando tipos TypeScript..."
                        npm install --save-dev @types/cors @types/express @types/bcrypt @types/jsonwebtoken @types/pg
                        
                        echo "‚öôÔ∏è Compilando TypeScript..."
                        npm run build
                        
                        echo "üöÄ Iniciando aplicaci√≥n..."
                        pm2 delete ${pm2_name} || true
                        pm2 start npm --name ${pm2_name} -- start
                        pm2 save
                        
                        if [ ! -f "/etc/systemd/system/pm2-${EC2_USER}.service" ]; then
                            pm2 startup
                        fi
                    '
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh """
                    ssh -i $SSH_KEY -o StrictHostKeyChecking=no $EC2_USER@$ip '
                        echo "üîÑ Verificando estado del servicio..."
                        sleep 10  # Dar m√°s tiempo para que la aplicaci√≥n inicie
                        pm2 list
                        echo "üìÑ Contenido del archivo .env:"
                        cat $REMOTE_PATH/.env
                        curl -I http://localhost:3000/health || echo "‚ö†Ô∏è Servicio no responde"
                    '
                    """
                }
            }
        }
    }

    post {
        always {
            echo "‚úÖ Pipeline completado"
        }
        failure {
            echo "‚ùå Pipeline fall√≥"
            script {
                def ip = env.ACTUAL_BRANCH == 'dev' ? DEV_IP :
                         env.ACTUAL_BRANCH == 'qa'  ? QA_IP :
                         env.ACTUAL_BRANCH == 'main' ? PROD_IP : null
                
                if (ip) {
                    sh """
                    ssh -i $SSH_KEY -o StrictHostKeyChecking=no $EC2_USER@$ip '
                        echo "üìú Mostrando logs de la aplicaci√≥n..."
                        pm2 logs ${env.ACTUAL_BRANCH}-health --lines 100 || echo "No se pudieron obtener logs"
                        echo "üîç Verificando conexi√≥n a PostgreSQL..."
                        if ! command -v nc > /dev/null; then
                            sudo apt-get install -y netcat
                        fi
                        if [ -f "$REMOTE_PATH/.env" ]; then
                            DB_HOST=\$(grep DB_HOST $REMOTE_PATH/.env | cut -d= -f2)
                            DB_PORT=\$(grep DB_PORT $REMOTE_PATH/.env | cut -d= -f2)
                            echo "üîç Probando conexi√≥n a \$DB_HOST:\$DB_PORT..."
                            nc -zv \$DB_HOST \$DB_PORT || echo "‚ùå No se puede conectar a PostgreSQL"
                        fi
                    '
                    """
                }
            }
        }
    }
}